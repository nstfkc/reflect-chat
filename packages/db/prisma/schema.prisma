// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "npx zod-prisma-types"
  output   = "../src/zod"
}

model Organisation {
  id       Int    @id @default(autoincrement())
  publicId String @unique @default(cuid())
  name     String

  membership Membership[]
  channels   Channel[]

  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  OrganisationInvitation OrganisationInvitation[]
}

model OrganisationInvitation {
  id       Int    @id @default(autoincrement())
  publicId String @unique @default(cuid())

  createdBy    User         @relation(fields: [creatorId], references: [id])
  organisation Organisation @relation(fields: [organizationId], references: [id])
  issuedEmail  String

  createdAt      DateTime @default(now())
  expiresAt      DateTime
  creatorId      Int
  organizationId Int

  @@index([creatorId])
  @@index([organizationId])
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model Membership {
  id   Int            @id @default(autoincrement())
  role MembershipRole

  organization   Organisation @relation(fields: [organizationId], references: [id])
  organizationId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  // When the user joins, we will clear out the name and email and set the user.
  invitedName  String?
  invitedEmail String?

  @@unique([organizationId, invitedEmail])
  @@index([userId])
}

model User {
  id        Int        @id @default(autoincrement())
  publicId  String     @unique @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  email     String     @unique
  password  String
  role      GlobalRole

  userProfile UserProfile? @relation(fields: [userProfileId], references: [id])

  memberships            Membership[]
  OrganisationInvitation OrganisationInvitation[]
  userProfileId          Int

  @@index([userProfileId])
}

model UserProfile {
  id       Int    @id @default(autoincrement())
  publicId String @unique @default(cuid())

  profilePictureUrl String?
  profileColor      String  @default("#000000")
  username          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

enum ChannelKind {
  PRIVATE
  PUBLIC
}

model Channel {
  id          String      @id @default(cuid())
  kind        ChannelKind @default(PUBLIC)
  createdBy   String // user id
  name        String?
  description String?

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Organisation   Organisation? @relation(fields: [organisationId], references: [publicId])
  organisationId String?

  @@index([organisationId])
}

model Media {
  id       String @id @default(cuid())
  kind     String
  filename String
  size     Int
  width    Int    @default(0)
  height   Int    @default(0)
  path     String

  createdAt DateTime @default(now())
  Message   Message? @relation(fields: [messageId], references: [id])
  messageId String?

  @@index([messageId])
}

model Message {
  id String @id @default(cuid())

  text  String  @db.Text
  media Media[]

  senderId   String
  receiverId String?
  channelId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([senderId])
  @@index([receiverId])
}

model UserNotifications {
  id String @id @default(cuid())

  payload String

  userId String?

  @@index([userId])
}

model InvitationCode {
  id String @id @default(cuid())

  role   String //admin 
  userId String?
}

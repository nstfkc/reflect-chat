// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Organisation {
  id       Int    @id @default(autoincrement())
  publicId String @unique @default(cuid())
  name     String

  membership Membership[]
  channels   Channel[]

  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  OrganisationInvitation OrganisationInvitation[]
}

model OrganisationInvitation {
  id       Int    @id @default(autoincrement())
  publicId String @unique @default(cuid())

  createdBy    User         @relation(fields: [creatorId], references: [id])
  organisation Organisation @relation(fields: [organisationId], references: [id])
  issuedEmail  String

  createdAt      DateTime @default(now())
  expiresAt      DateTime
  creatorId      Int
  organisationId Int

  @@index([creatorId])
  @@index([organisationId])
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
  VISITOR
}

enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model Membership {
  id   Int            @id @default(autoincrement())
  role MembershipRole

  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  // When the user joins, we will clear out the name and email and set the user.
  invitedName  String?
  invitedEmail String?

  @@unique([organisationId, invitedEmail])
  @@index([userId])
}

model User {
  id        Int        @id @default(autoincrement())
  publicId  String     @unique @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  email     String     @unique
  password  String
  role      GlobalRole

  userProfile UserProfile?
  userStatus  UserStatus?

  memberships            Membership[]
  OrganisationInvitation OrganisationInvitation[]
  messagesSent           Message[]                @relation("Sender")
  messagesReceived       Message[]                @relation("Receiver")
  Channel                Channel[]
  reactions              Reaction[]
}

enum UserStatusKind {
  ONLINE
  BUSY
  OFFLINE
}

model UserStatus {
  id Int @id @default(autoincrement())

  status     UserStatusKind @default(ONLINE)
  lastSeenAt DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  user       User           @relation(fields: [userId], references: [id])
  userId     Int            @unique

  @@index([userId])
}

model UserProfile {
  id       Int    @id @default(autoincrement())
  publicId String @unique @default(cuid())

  profilePictureUrl String?
  profileColor      String  @default("#000000")
  username          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
}

enum ChannelKind {
  PRIVATE
  PUBLIC
}

model Channel {
  id          Int         @id @default(autoincrement())
  publicId    String      @unique @default(cuid())
  kind        ChannelKind @default(PUBLIC)
  createdBy   User        @relation(fields: [createdById], references: [id])
  name        String?
  description String?

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Organisation Organisation @relation(fields: [organisationId], references: [id])

  organisationId Int
  createdById    Int
  Message        Message[]

  @@index([organisationId])
  @@index([createdById])
}

model Media {
  id       Int    @id @default(autoincrement())
  publicId String @default(cuid())

  kind     String
  filename String
  size     Int
  width    Int    @default(0)
  height   Int    @default(0)
  path     String

  createdAt DateTime @default(now())

  Message   Message? @relation(fields: [messageId], references: [id])
  messageId Int?

  @@index([messageId])
}

model Message {
  id       Int    @id @default(autoincrement())
  publicId String @unique @default(cuid())
  renderer String @default("default.v1")

  text      String     @db.Text
  media     Media[]
  thread    Message[]  @relation("Conversation")
  reactions Reaction[]

  sender       User     @relation("Sender", fields: [senderId], references: [id])
  receiver     User?    @relation("Receiver", fields: [receiverId], references: [id])
  channel      Channel? @relation(fields: [channelId], references: [id])
  conversation Message? @relation("Conversation", fields: [conversationId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  senderId       Int
  receiverId     Int?
  channelId      Int?
  conversationId Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([senderId])
  @@index([receiverId])
  @@index([channelId])
  @@index([conversationId])
}

model Reaction {
  id Int @id @default(autoincrement())

  unified String  @db.Char(16)
  user    User    @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  userId    Int
  messageId Int

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([messageId])
}

model UserNotifications {
  id String @id @default(cuid())

  payload String

  userId String?

  @@index([userId])
}

model InvitationCode {
  id String @id @default(cuid())

  role   String //admin 
  userId String?
}

model WaitingList {
  id Int @id @default(autoincrement())

  agreedToReceiveUpdates Boolean? @default(false)
  email                  String
  createtAt              DateTime @default(now())
}

model ContactForm {
  id Int @id @default(autoincrement())

  email       String
  jobTitle    String? @default("")
  description String? @default("")

  agreedToReceiveUpdates Boolean? @default(false)
  createtAt              DateTime @default(now())
}
